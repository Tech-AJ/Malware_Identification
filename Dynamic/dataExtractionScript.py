import csv
import json
import os


def append_len(d, key, row):
    if d.has_key(key):
        row.append(len(d[key]))
        # print("Key "+key+len(d).__str__(),d)
    else:
        row.append(0)


def api_stat(d, key, row):
    flag = 0

    for k in d:
        if d[k].has_key(key):
            row.append(d[k][key])
            flag = 1
            break

    if flag == 0:
        row.append(0)


def dll_present(d, key, row):
    if key in d:
        row.append(1)
    else:
        row.append(0)


def severity_count(d, key, row):
    count3 = 0
    count5 = 0
    for index in range(len(d)):
        if d[index].has_key(key):

            if d[index][key] >= 3:  # or d[index][key] == 4:
                count3 += 1
            # elif d[index][key] >= 5:
            #   count5 += 1

    row.append(count3)
    # row.append(count5)


with open('dynamicTrain.csv', 'wb') as outfile2:
    writer = csv.writer(outfile2)
    isMalware = ['Malware']
    summary = ['file_created', 'directory_created', 'regkey_written', 'regkey_deleted',
               'file_deleted', 'dll_loaded', 'regkey_read']
    api_stats = ["IsDebuggerPresent",
                 "CreateProcessInternalW",
                 "CoInitializeEx",
                 "CoUninitialize",
                 "FindFirstFileExW",
                 # "GetFileInformationByHandleEx",
                 # "GetFileSize",
                 # "GetFileSizeEx",
                 # "GetSystemTimeAsFileTime",
                 "GetSystemWindowsDirectoryW",
                 # "GetTempPathW",
                 # "GetVolumeNameForVolumeMountPointW",
                 # "GetVolumePathNamesForVolumeNameW",
                 "GlobalMemoryStatusEx",
                 "LdrGetDllHandle",
                 # "LdrGetProcedureAddress",
                 # "LdrLoadDll",
                 # "LdrUnloadDll",
                 # "NtAllocateVirtualMemory",
                 "NtClose",
                 "NtCreateFile",
                 # "NtCreateSection",
                 # "NtDuplicateObject",
                 "NtFreeVirtualMemory",
                 "NtMapViewOfSection",
                 "NtOpenFile",
                 "NtOpenKey",
                 # "NtOpenKeyEx",
                 "NtOpenProcess",
                 "NtOpenSection",
                 # "NtProtectVirtualMemory",
                 "NtQueryAttributesFile",
                 # "NtQueryDirectoryFile",
                 "NtQueryFullAttributesFile",
                 # "NtQueryInformationFile",
                 # "NtQuerySystemInformation",
                 # "NtReadFile",
                 # "NtSetInformationFile",
                 # "NtTerminateProcess",
                 # "NtUnmapViewOfSection",
                 # "OleInitialize",
                 "RegCloseKey",
                 # "RegEnumKeyW",
                 # "RegOpenKeyExA",
                 # "RegOpenKeyExW",
                 # "RegQueryValueExA",
                 # "RegQueryValueExW",
                 # "SetErrorMode",
                 # "SetFilePointer",
                 "SetFilePointerEx",
                 # "NtQueryValueKey"
                 ]

    dll_loaded = ['USER32.dll',
                  # "comctl32.dll",
                  "UxTheme.dll",
                  # "ws2_32.dll",
                  "wmi_net.utils"]

    network = ["udp"]
    # , "dns", "domains", "icmp"]
    severity = ["severity3above"]
    writer.writerow(isMalware + summary + api_stats + dll_loaded + network + severity)

    for root, dirs, files in os.walk(os.getcwd() + "/../Malware"):
        for file in files:

            if file.endswith(".json"):
                # print(os.path.join(root, file))
                row = []
                if (root.find("Benign") != -1):
                    # print("found")
                    row.append(0)
                else:
                    row.append(1)
                    # earlier tried multclass classification
                    # if (root.find("TrojanDownloader") != -1):
                    #     row.append(1)
                    # elif (root.find("TrojanDropper") != -1):
                    #     row.append(2)
                    # elif (root.find("Trojan") != -1):
                    #     row.append(3)
                    # elif (root.find("Virus") != -1):
                    #     row.append(4)
                    # elif (root.find("Worm") != -1):
                    #     row.append(5)
                    # elif (root.find("Backdoor") != -1):
                    #     row.append(6)
                    # print("Not found")
                with open(os.path.join(root, file)) as json_data:

                    d = json.load(json_data)
                    for i in dll_loaded:
                        if (d.has_key("behavior") and d["behavior"].has_key("summary")) and d["behavior"]["summary"].has_key("dll_loaded"):
                            dll_present(d["behavior"]["summary"]["dll_loaded"], i, row)
                        else:
                            row.append(0)

                    for i in summary:
                        if d.has_key("behavior") and d["behavior"].has_key("summary"):
                            append_len(d["behavior"]["summary"], i, row)
                        else:
                            row.append(0)

                    for i in api_stats:
                        if d.has_key("behavior") and d["behavior"].has_key("apistats"):
                            api_stat(d["behavior"]["apistats"], i, row)
                        else:
                            row.append(0)
                    for i in network:
                        if d.has_key("network"):
                            append_len(d["network"], i, row)
                        else:
                            row.append(0)
                    severity_count(d["signatures"], "severity", row)
                    writer.writerow(row)
