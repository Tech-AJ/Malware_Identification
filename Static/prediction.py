#!/usr/bin/env python
import csv
import os
import sys

import numpy as np

base_dir = sys.argv[1]

with open('static.csv', 'wb') as predictFile:
    writer = csv.writer(predictFile)
    writer.writerow(["File_Hash", "Predicted Label"])

    for root, dirs, files in os.walk(base_dir):

        for file in files:
            hashFile = os.path.basename(root)

            if file == "Structure_Info.txt":
                row = []
                # feature extraction
                with open(os.path.join(root, file)) as f:
                    lines = f.readlines()
                    for i in range(0, len(lines)):
                        line = lines[i]
                        if line.find("[IMAGE_FILE_HEADER]") != -1:
                            # 2 pos is required
                            str = lines[2 + i].split(":")
                            row.append(int(str[1].strip(), 16))

                        if line.find("[IMAGE_OPTIONAL_HEADER]") != -1:
                            count = 0
                            for j in range(1, 29):
                                str = lines[j + i].split(":")
                                row.append(int(str[1].strip(), 16))
                                count += 1
                                if count == 28:
                                    break
                        if line.find("[IMAGE_SECTION_HEADER]") != -1:
                            count = 0
                            i += 1

                            for j in range(1, 14):
                                if j == 12:
                                    continue
                                if j == 13:
                                    str = lines[i + j].split(":")
                                    row.append(str[1].strip().split(" ")[0].strip())
                                    continue

                                str = lines[i + j].split(":")
                                row.append(int(str[1].strip(), 16))
                                count += 1
                                # skip flags
                            break

                import pickle

                # Load from file
                with open('modelStatic.sav', 'rb') as file:
                    pickle_model = pickle.load(file)

                row2 = []

                try:
                    #prediction
                    y = pickle_model.predict(np.array(row).reshape(1, -1))
                except:
                    # exception handling
                    row2.append(hashFile)
                    row2.append("M")
                    writer.writerow(row2)
                    continue
                    #print("catch")

                if (y[0] == 0):
                    row2.append(hashFile)
                    row2.append("B")
                else:
                    row2.append(hashFile)
                    row2.append("M")

                writer.writerow(row2)
